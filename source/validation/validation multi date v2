/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var AOI = 
    /* color: #d63000 */
    /* shown: false */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[6.3148777592775795, 61.86475486581893],
          [6.3148777592775795, 61.34756046804393],
          [7.3970310795900795, 61.34756046804393],
          [7.3970310795900795, 61.86475486581893]]], null, false);
/***** End of imports. If edited, may not auto-convert in the playground. *****/

/** Declare Landsat Date **/
var date_sat_dictionary = ee.List([
  {date: ee.Date('2019-07-25'),
  satellite_name: 'Landsat_8'
  },
  {date: ee.Date('2019-05-10'),
  satellite_name: 'Landsat_8'
  },
  {date: ee.Date('2020-06-16'),
  satellite_name: 'Landsat_8'
  },
  {date: ee.Date('2020-06-01'),
  satellite_name: 'Landsat_8'
  },
]);

/** Function **/ 
var output = date_sat_dictionary.map(function(entry) {
    
  /** Setup Variables **/
  entry = ee.Dictionary(entry);
  var date_range = ee.DateRange(ee.Date(entry.get('date')), ee.Date(entry.get('date')).advance(16, 'days'));
  var collections = ee.Dictionary([
    'Landsat_4', ee.ImageCollection('LANDSAT/LT04/C02/T1_L2')
      .filterBounds(AOI)
      .filterDate(date_range)
      .select(['SR_B1', 'SR_B2', 'SR_B3', 'SR_B4', 'SR_B5', 'SR_B7', 'ST_B6', 'QA_PIXEL'],
              ['Blue', 'Green', 'Red', 'NIR', 'SWIR_1', 'SWIR_2', 'TIR', 'QA_PIXEL']),
    'Landsat_5', ee.ImageCollection('LANDSAT/LT05/C02/T1_L2')
      .filterBounds(AOI)
      .filterDate(date_range)
      .select(['SR_B1', 'SR_B2', 'SR_B3', 'SR_B4', 'SR_B5', 'SR_B7', 'ST_B6', 'QA_PIXEL'],
              ['Blue', 'Green', 'Red', 'NIR', 'SWIR_1', 'SWIR_2', 'TIR', 'QA_PIXEL']),
    'Landsat_7', ee.ImageCollection('LANDSAT/LE07/C02/T1_L2')
      .filterBounds(AOI)
      .filterDate(date_range)
      .select(['SR_B1', 'SR_B2', 'SR_B3', 'SR_B4', 'SR_B5', 'SR_B7', 'ST_B6', 'QA_PIXEL'], 
              ['Blue', 'Green', 'Red', 'NIR', 'SWIR_1', 'SWIR_2', 'TIR', 'QA_PIXEL']),
    'Landsat_8', ee.ImageCollection('LANDSAT/LC08/C02/T1_L2')
      .filterBounds(AOI)
      .filterDate(date_range)
      .select(['SR_B2', 'SR_B3', 'SR_B4', 'SR_B5', 'SR_B6', 'SR_B7', 'ST_B10', 'QA_PIXEL'],
              ['Blue', 'Green', 'Red', 'NIR', 'SWIR_1', 'SWIR_2', 'TIR', 'QA_PIXEL'])
  ]);
  var satellite_name = entry.get('satellite_name');
  var mosaic = ee.ImageCollection(collections.get(satellite_name)).mosaic();
    
  /** Find Landsat FSC **/
  // Calculate Indicies:
  // Snow Index (SWI)
  var snow_index = mosaic.expression('((Green * (NIR - SWIR)) / ((Green + NIR) * (NIR + SWIR)))',
    {'Green': mosaic.select('Green'),
     'NIR':   mosaic.select('NIR'),
     'SWIR':  mosaic.select('SWIR_1')});
  
  // Vegetation Index (GVI)
  var vegetation_index = mosaic.expression(' (-0.2848 * Blue) + (-0.2435 * Green) + (-0.5436 * Red) + (0.7243 * NIR) + (0.0840 * SWIR1) + (-0.1800 * SWIR2)',
    {'Blue': mosaic.select('Blue'),
     'Green': mosaic.select('Green'),
     'Red': mosaic.select('Red'),
     'NIR': mosaic.select('NIR'),
     'SWIR1': mosaic.select('SWIR_1'),
     'SWIR2': mosaic.select('SWIR_2')});
  
  // Water Index (MNDWIinv)
  var water_index = mosaic.expression('1 / ((Green - SWIR) + (NIR - SWIR) / (Green + SWIR) + (NIR + SWIR))',
    {'Green': mosaic.select('Green'),
     'NIR': mosaic.select('NIR'),
     'SWIR': mosaic.select('SWIR_1')});
  
  // Rock Index (NDBI)
  var rock_index = mosaic.expression('(SWIR - NIR) / (SWIR + NIR)',
    {'NIR': mosaic.select('NIR'),
     'SWIR': mosaic.select('SWIR_1')});
  
  // Find Endmembers
  var indicies = ee.List([snow_index, vegetation_index, water_index, rock_index]);
  var endmembers = indicies.map(function(index) {
    var percentile = ee.Number(
      ee.Image(index).reduceRegion({
        reducer: ee.Reducer.percentile({percentiles: [95]}),
        geometry: AOI,
        scale: 30,
        maxPixels: 1000000, // set to  value which is large enough to create accurate endmembers but not too large to make computation time too long.
        bestEffort: true
      })
    .values()
    .get(0)
    );
    var thresholded_index = ee.Image(index).gt(percentile);
    var masked_image = mosaic.updateMask(thresholded_index);
    return masked_image.select(['Blue', 'Green', 'Red', 'NIR', 'SWIR_1', 'SWIR_2', 'TIR'])
      .reduceRegion({
        reducer: ee.Reducer.mean(),
        geometry: AOI,
        scale: 30,
        bestEffort: true
      })
    .values();
  });
  
  // Linear Spectral Unmixing
  var unmixed_mosaic = mosaic.select(['Blue', 'Green', 'Red', 'NIR', 'SWIR_1', 'SWIR_2', 'TIR'])
    .unmix({
      endmembers: endmembers,
      sumToOne: true,
      nonNegative: true})
    .rename('snow_component', 'vegetation_component', 'water_component', 'rock_component');
  
  // Find 50% and above snow pixels
  var snowcap = unmixed_mosaic.select(['snow_component'], ['FSC']);
  var landsatFSC = snowcap.mask(snowcap.gt(0.5));
    
  /** Import MODIS FSC **/
  var terraFSC = ee.ImageCollection("MODIS/006/MOD10A1")
    .filterDate(date_range)
    .filterBounds(AOI)
    .select(['NDSI_Snow_Cover'], ['FSC'])
    .mosaic()
    .divide(100);
    
  /** Region Stats **/
  
  // Get total area of AOI in metres
  var geometry_area = AOI.area({
    maxError: 1,
  });
  
  // Get the MODIS derived snow cover area
  terraFSC = terraFSC.clip(AOI);
  var terra_per_pixel_area = terraFSC.multiply(ee.Image.pixelArea());
  var terra_snow_cover_area = ee.Number(terra_per_pixel_area.reduceRegion({
    reducer: 'sum',
    geometry: AOI,
    scale: 500
  }).get('FSC'));
  var terra_snow_cover_percentage = terra_snow_cover_area.divide(geometry_area).multiply(100);

  // Get the Landsat derived snow cover area
  landsatFSC = landsatFSC.clip(AOI);
  var landsat_per_pixel_area = landsatFSC.multiply(ee.Image.pixelArea());
  var landsat_snow_cover_area = ee.Number(landsat_per_pixel_area.reduceRegion({
    reducer: 'sum',
    geometry: AOI,
    scale: 500
  }).get('FSC'));
  var landsat_snow_cover_percentage = landsat_snow_cover_area.divide(geometry_area).multiply(100);
  
  // Return Dictionary of Values
  return {
    'a1) Geometry Area (km2)': geometry_area.divide(1e6),
    'b1) Terra Snow Cover Area (km2)': terra_snow_cover_area.divide(1e6),
    'b2) Terra Snow Cover Percentage': terra_snow_cover_percentage,
    'b3) Terra FSC Mask': terraFSC,
    'c1) Landsat Snow Cover Area (km2)': landsat_snow_cover_area.divide(1e6),
    'c2) Landsat Snow Cover Percentage': landsat_snow_cover_percentage,
    'c3) Landsat Mosaic': mosaic,
    'c4) Landsat FSC Mask': landsatFSC,
  };
});

/** Output Image **/
print(output);

// Add the Base Landsat Image
// Check it for cloud - we dont want any cloud! (there isnt one avaialable for MODIS in the same datset)
Map.addLayer(ee.Image(ee.Dictionary(output.get(3)).get('c3) Landsat Mosaic')).clip(AOI), {}, 'Landsat Mosaic');

// FSC's
// Showing the variation in snow coverage per pixel (of those >0.5 FSC)
Map.addLayer(ee.Image(ee.Dictionary(output.get(0)).get('c4) Landsat FSC Mask')), {min: 0, max: 1}, 'Landsat FSC', 0);
Map.addLayer(ee.Image(ee.Dictionary(output.get(0)).get('b3) Terra FSC Mask')).selfMask(), {min: 0, max: 1}, 'MODIS FSC', 0);

// FCS Masks
// Showing the maximim extent of FSC pixels >0.5
// Useful to check if there are any clouds or any dubious holes in the snow area likely produced from clouds
Map.addLayer(ee.Image(ee.Dictionary(output.get(0)).get('c4) Landsat FSC Mask')).gt(0), {palette: 'Red'}, 'Landsat FSC Mask', 0);
Map.addLayer(ee.Image(ee.Dictionary(output.get(0)).get('b3) Terra FSC Mask')).gt(0).selfMask(), {palette: 'blue'}, 'MODIS FSC Mask', 0);