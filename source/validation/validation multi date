/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var geometry = 
    /* color: #d63000 */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[6.3148777592775795, 61.86475486581893],
          [6.3148777592775795, 61.34756046804393],
          [7.3970310795900795, 61.34756046804393],
          [7.3970310795900795, 61.86475486581893]]], null, false);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
/** Declare Landsat Date **/
var date_sat_dictionary = ee.List([
  {date: ee.Date('2020-06-01'),
  satellite_name: 'Landsat_8'
  },
  {date: ee.Date('2020-06-24'),
  satellite_name: 'Landsat_8'
  },
]);

/** Function **/ 
var output = date_sat_dictionary.map(function(entry) {

  /** Setup Variables **/
  entry = ee.Dictionary(entry);
  var date_range = ee.DateRange(ee.Date(entry.get('date')), ee.Date(entry.get('date')).advance(16, 'days'));
  var collections = ee.Dictionary([
    'Landsat_4', ee.ImageCollection('LANDSAT/LT04/C02/T1_L2')
      .filterBounds(geometry)
      .filterDate(date_range)
      .select(['SR_B1', 'SR_B2', 'SR_B3', 'SR_B4', 'SR_B5', 'SR_B7', 'ST_B6', 'QA_PIXEL'],
              ['Blue', 'Green', 'Red', 'NIR', 'SWIR_1', 'SWIR_2', 'TIR', 'QA_PIXEL']),
    'Landsat_5', ee.ImageCollection('LANDSAT/LT05/C02/T1_L2')
      .filterBounds(geometry)
      .filterDate(date_range)
      .select(['SR_B1', 'SR_B2', 'SR_B3', 'SR_B4', 'SR_B5', 'SR_B7', 'ST_B6', 'QA_PIXEL'],
              ['Blue', 'Green', 'Red', 'NIR', 'SWIR_1', 'SWIR_2', 'TIR', 'QA_PIXEL']),
    'Landsat_7', ee.ImageCollection('LANDSAT/LE07/C02/T1_L2')
      .filterBounds(geometry)
      .filterDate(date_range)
      .select(['SR_B1', 'SR_B2', 'SR_B3', 'SR_B4', 'SR_B5', 'SR_B7', 'ST_B6', 'QA_PIXEL'], 
              ['Blue', 'Green', 'Red', 'NIR', 'SWIR_1', 'SWIR_2', 'TIR', 'QA_PIXEL']),
    'Landsat_8', ee.ImageCollection('LANDSAT/LC08/C02/T1_L2')
      .filterBounds(geometry)
      .filterDate(date_range)
      .select(['SR_B2', 'SR_B3', 'SR_B4', 'SR_B5', 'SR_B6', 'SR_B7', 'ST_B10', 'QA_PIXEL'],
              ['Blue', 'Green', 'Red', 'NIR', 'SWIR_1', 'SWIR_2', 'TIR', 'QA_PIXEL'])
  ]);
  var satellite_name = entry.get('satellite_name');
  var collection = ee.ImageCollection(collections.get(satellite_name)).mosaic();
  
  /** Find Landsat FSC **/
  var cloudless_mosaic = collection;
  // Calculate Indicies:
  // Snow Index (SWI)
  var snow_index = cloudless_mosaic.expression('((Green * (NIR - SWIR)) / ((Green + NIR) * (NIR + SWIR)))',
    {'Green': cloudless_mosaic.select('Green'),
     'NIR':   cloudless_mosaic.select('NIR'),
     'SWIR':  cloudless_mosaic.select('SWIR_1')});
  
  // Vegetation Index (GVI)
  var vegetation_index = cloudless_mosaic.expression(' (-0.2848 * Blue) + (-0.2435 * Green) + (-0.5436 * Red) + (0.7243 * NIR) + (0.0840 * SWIR1) + (-0.1800 * SWIR2)',
    {'Blue': cloudless_mosaic.select('Blue'),
     'Green': cloudless_mosaic.select('Green'),
     'Red': cloudless_mosaic.select('Red'),
     'NIR': cloudless_mosaic.select('NIR'),
     'SWIR1': cloudless_mosaic.select('SWIR_1'),
     'SWIR2': cloudless_mosaic.select('SWIR_2')});
  
  // Water Index (MNDWIinv)
  var water_index = cloudless_mosaic.expression('1 / ((Green - SWIR) + (NIR - SWIR) / (Green + SWIR) + (NIR + SWIR))',
    {'Green': cloudless_mosaic.select('Green'),
     'NIR': cloudless_mosaic.select('NIR'),
     'SWIR': cloudless_mosaic.select('SWIR_1')});
  
  // Rock Index (NDBI)
  var rock_index = cloudless_mosaic.expression('(SWIR - NIR) / (SWIR + NIR)',
    {'NIR': cloudless_mosaic.select('NIR'),
     'SWIR': cloudless_mosaic.select('SWIR_1')});
  
  // Find Endmembers
  var indicies = ee.List([snow_index, vegetation_index, water_index, rock_index]);
  var endmembers = indicies.map(function(index) {
    var percentile = ee.Number(
      ee.Image(index).reduceRegion({
        reducer: ee.Reducer.percentile({percentiles: [95]}),
        geometry: geometry,
        scale: 30,
        maxPixels: 1000000, // set to  value which is large enough to create accurate endmembers but not too large to make computation time too long.
        bestEffort: true
      })
    .values()
    .get(0)
    );
    var thresholded_index = ee.Image(index).gt(percentile);
    var masked_image = cloudless_mosaic.updateMask(thresholded_index);
    return masked_image.select(['Blue', 'Green', 'Red', 'NIR', 'SWIR_1', 'SWIR_2', 'TIR'])
      .reduceRegion({
        reducer: ee.Reducer.mean(),
        geometry: geometry,
        scale: 30,
        bestEffort: true
      })
    .values();
  });
  
  // Linear Spectral Unmixing
  var unmixed_mosaic = cloudless_mosaic.select(['Blue', 'Green', 'Red', 'NIR', 'SWIR_1', 'SWIR_2', 'TIR'])
    .unmix({
      endmembers: endmembers,
      sumToOne: true,
      nonNegative: true})
    .rename('snow_component', 'vegetation_component', 'water_component', 'rock_component');
  
  // Find 50% and above snow pixels
  var snowcap = unmixed_mosaic.select(['snow_component'], ['mask']);
  var landsatFSC = snowcap.mask(snowcap.gt(0.5));
  
  /** Import MODIS FSC **/
  var terraFSC = ee.ImageCollection("MODIS/006/MOD10A1")
    .filterDate(date_range)
    .filterBounds(geometry)
    .select('NDSI_Snow_Cover')
    .mosaic()
    .divide(100);
  
  /** Region Stats **/
  var geometry_area = geometry.area(ee.Number(1));
  
  // MODIS region
  var clip = terraFSC.clip(geometry);
  var pixel_area = clip.multiply(ee.Image.pixelArea())
  
  var test = pixel_area.reduceRegion({
    reducer: ee.Reducer.sum(),
    geometry: geometry,
    scale: 500,
    })
    .get('NDSI_Snow_Cover');
  var terra_area = ee.Number(test).multiply(500).multiply(500);
  
  // landsat region
  var clip = landsatFSC.clip(geometry);
  var test = clip.reduceRegion({
    reducer: ee.Reducer.sum(),
    geometry: geometry,
    scale: 30,
    })
    .get('mask');
  var landsat_area = ee.Number(test).multiply(30).multiply(30);
  
  /** Output **/
  return {
    date: date_range,
    MODIS_percentage_cover: terra_area.divide(geometry_area).multiply(100),
    landsat_percentage_cover: landsat_area.divide(geometry_area).multiply(100),
    MODIS_image: terraFSC,
    landsat_image: collection,
    geometry_area: geometry_area,
    terra_area: terra_area,
    landsat_area: landsat_area,
  };
  
});

/** Output Image **/
print(output);
Map.addLayer(ee.Image(ee.Dictionary(output.get(1)).get('landsat_image')), {}, 'Landsat Image');
Map.addLayer(ee.Image(ee.Dictionary(output.get(1)).get('MODIS_image')), {}, 'MODIS Snowcover');