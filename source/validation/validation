/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var transect = 
    /* color: #d63000 */
    /* shown: false */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[6.4449431471587015, 61.838048615258295],
          [6.4449431471587015, 61.41976437025957],
          [7.3911406569243265, 61.41976437025957],
          [7.3911406569243265, 61.838048615258295]]], null, false),
    modis_size = 
    /* color: #98ff00 */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[6.313995188120183, 61.73997466855641],
          [6.313995188120183, 61.29826999994584],
          [7.223113840463933, 61.29826999994584],
          [7.223113840463933, 61.73997466855641]]], null, false);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
/** Declare Landsat Date **/
var date_range = ee.DateRange('2020-06-24', '2020-07-07');

/** Landsat Imagery Import **/
var satellite_name = 'Landsat_8';
var collections = ee.Dictionary([
  'Landsat_4', ee.ImageCollection('LANDSAT/LT04/C02/T1_L2')
    .filterBounds(transect)
    .filterDate(date_range)
    .select(['SR_B1', 'SR_B2', 'SR_B3', 'SR_B4', 'SR_B5', 'SR_B7', 'ST_B6', 'QA_PIXEL'],
            ['Blue', 'Green', 'Red', 'NIR', 'SWIR_1', 'SWIR_2', 'TIR', 'QA_PIXEL']),
  'Landsat_5', ee.ImageCollection('LANDSAT/LT05/C02/T1_L2')
    .filterBounds(transect)
    .filterDate(date_range)
    .select(['SR_B1', 'SR_B2', 'SR_B3', 'SR_B4', 'SR_B5', 'SR_B7', 'ST_B6', 'QA_PIXEL'],
            ['Blue', 'Green', 'Red', 'NIR', 'SWIR_1', 'SWIR_2', 'TIR', 'QA_PIXEL']),
  'Landsat_7', ee.ImageCollection('LANDSAT/LE07/C02/T1_L2')
    .filterBounds(transect)
    .filterDate(date_range)
    .select(['SR_B1', 'SR_B2', 'SR_B3', 'SR_B4', 'SR_B5', 'SR_B7', 'ST_B6', 'QA_PIXEL'], 
            ['Blue', 'Green', 'Red', 'NIR', 'SWIR_1', 'SWIR_2', 'TIR', 'QA_PIXEL']),
  'Landsat_8', ee.ImageCollection('LANDSAT/LC08/C02/T1_L2')
    .filterBounds(transect)
    .filterDate(date_range)
    .select(['SR_B2', 'SR_B3', 'SR_B4', 'SR_B5', 'SR_B6', 'SR_B7', 'ST_B10', 'QA_PIXEL'],
            ['Blue', 'Green', 'Red', 'NIR', 'SWIR_1', 'SWIR_2', 'TIR', 'QA_PIXEL'])
]);
var collection = ee.ImageCollection(collections.get(satellite_name)).first();
Map.addLayer(collection, [], 'Landsat Imagery - Check for Cloud!');

/** Find Landsat FSC **/
var cloudless_mosaic = collection;
// Calculate Indicies:
// Snow Index (SWI)
var snow_index = cloudless_mosaic.expression('((Green * (NIR - SWIR)) / ((Green + NIR) * (NIR + SWIR)))',
  {'Green': cloudless_mosaic.select('Green'),
   'NIR':   cloudless_mosaic.select('NIR'),
   'SWIR':  cloudless_mosaic.select('SWIR_1')});

// Vegetation Index (GVI)
var vegetation_index = cloudless_mosaic.expression(' (-0.2848 * Blue) + (-0.2435 * Green) + (-0.5436 * Red) + (0.7243 * NIR) + (0.0840 * SWIR1) + (-0.1800 * SWIR2)',
  {'Blue': cloudless_mosaic.select('Blue'),
   'Green': cloudless_mosaic.select('Green'),
   'Red': cloudless_mosaic.select('Red'),
   'NIR': cloudless_mosaic.select('NIR'),
   'SWIR1': cloudless_mosaic.select('SWIR_1'),
   'SWIR2': cloudless_mosaic.select('SWIR_2')});

// Water Index (MNDWIinv)
var water_index = cloudless_mosaic.expression('1 / ((Green - SWIR) + (NIR - SWIR) / (Green + SWIR) + (NIR + SWIR))',
  {'Green': cloudless_mosaic.select('Green'),
   'NIR': cloudless_mosaic.select('NIR'),
   'SWIR': cloudless_mosaic.select('SWIR_1')});

// Rock Index (NDBI)
var rock_index = cloudless_mosaic.expression('(SWIR - NIR) / (SWIR + NIR)',
  {'NIR': cloudless_mosaic.select('NIR'),
   'SWIR': cloudless_mosaic.select('SWIR_1')});

// Find Endmembers
var indicies = ee.List([snow_index, vegetation_index, water_index, rock_index]);
var endmembers = indicies.map(function(index) {
  var percentile = ee.Number(
    ee.Image(index).reduceRegion({
      reducer: ee.Reducer.percentile({percentiles: [95]}),
      geometry: transect,
      scale: 30,
      maxPixels: 1000000, // set to  value which is large enough to create accurate endmembers but not too large to make computation time too long.
      bestEffort: true
    })
  .values()
  .get(0)
  );
  var thresholded_index = ee.Image(index).gt(percentile);
  var masked_image = cloudless_mosaic.updateMask(thresholded_index);
  return masked_image.select(['Blue', 'Green', 'Red', 'NIR', 'SWIR_1', 'SWIR_2', 'TIR'])
    .reduceRegion({
      reducer: ee.Reducer.mean(),
      geometry: transect,
      scale: 30,
      bestEffort: true
    })
  .values();
});

// Linear Spectral Unmixing
var unmixed_mosaic = cloudless_mosaic.select(['Blue', 'Green', 'Red', 'NIR', 'SWIR_1', 'SWIR_2', 'TIR'])
  .unmix({
    endmembers: endmembers,
    sumToOne: true,
    nonNegative: true})
  .rename('snow_component', 'vegetation_component', 'water_component', 'rock_component');

// Find 50% and above snow pixels
var snowcap = unmixed_mosaic
  .select(['snow_component'], ['mask']);
var landsatFSC = snowcap.mask(snowcap.gt(0.5));
Map.addLayer(landsatFSC, {}, 'landsatFSC', 1);

/** Import MODIS FSC **/
var terraFSC = ee.ImageCollection("MODIS/006/MOD10A1")
  .filterDate(date_range)
  .filterBounds(transect)
  .select('NDSI_Snow_Cover')
  .first()
  .divide(100);
Map.addLayer(terraFSC.selfMask(), {}, 'TerraFSC');

/** Region Stats **/
var geometry_area = modis_size.area(ee.Number(1));
print('Geometry Area (metres squared)', geometry_area);

// MODIS region
var clip = terraFSC.clip(modis_size);
var test = clip.reduceRegion({
  reducer: ee.Reducer.sum(),
  geometry: modis_size,
  scale: 500,
  })
  .get('NDSI_Snow_Cover');
var terra_area = ee.Number(test).multiply(500).multiply(500);
print('MODIS Snow Cover Area (metres squared)', terra_area);
print('MODIS Percentage Snow Cover Under Geometry:', terra_area.divide(geometry_area).multiply(100));

// landsat region
var clip = landsatFSC.clip(modis_size);
var test = clip.reduceRegion({
  reducer: ee.Reducer.sum(),
  geometry: modis_size,
  scale: 30,
  })
  .get('mask');
var landsat_area = ee.Number(test).multiply(30).multiply(30);
print('Landsat Snow Cover Area (metres squared)', landsat_area);
print('Landsat Percentage Snow Cover Under Geometry:', landsat_area.divide(geometry_area).multiply(100));